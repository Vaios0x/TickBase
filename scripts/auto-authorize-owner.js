const { ethers } = require("ethers");
require('dotenv').config();

// Configuraci√≥n
const VALIDATOR_CONTRACT = "0xB1627A905EB21938009f5fA97C9dd35ffB9F1e82";
const OWNER_ADDRESS = "0x8ca5CB396bF3AB2186942B5d6F9CedbDAFEeA343";

// ABI m√≠nima necesaria
const VALIDATOR_ABI = [
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_validator",
        "type": "address"
      }
    ],
    "name": "authorizeValidator",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_validator",
        "type": "address"
      }
    ],
    "name": "isAuthorizedValidator",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  }
];

async function main() {
  console.log("üîê Auto-autorizando wallet owner como validador...");
  console.log("=" .repeat(55));
  console.log("üìã Contrato TicketValidator:", VALIDATOR_CONTRACT);
  console.log("üë§ Owner/Validador:", OWNER_ADDRESS);
  console.log("");

  try {
    // Conectar a Base Sepolia
    const provider = new ethers.JsonRpcProvider("https://sepolia.base.org");
    
    // Necesitamos la clave privada desde variables de entorno
    const privateKey = process.env.PRIVATE_KEY;
    if (!privateKey) {
      console.error("‚ùå Error: PRIVATE_KEY no encontrada en .env");
      console.log("üìù A√±ade tu clave privada al archivo .env:");
      console.log("   PRIVATE_KEY=tu_clave_privada_aqui");
      process.exit(1);
    }

    // Crear wallet con la clave privada
    const wallet = new ethers.Wallet(privateKey, provider);
    console.log("üë§ Conectado con wallet:", wallet.address);
    
    // Verificar que la wallet es la correcta
    if (wallet.address.toLowerCase() !== OWNER_ADDRESS.toLowerCase()) {
      console.error("‚ùå Error: La clave privada no corresponde al owner esperado");
      console.log("   Esperado:", OWNER_ADDRESS);
      console.log("   Actual:", wallet.address);
      process.exit(1);
    }

    // Verificar balance
    const balance = await provider.getBalance(wallet.address);
    console.log("üí∞ Balance:", ethers.formatEther(balance), "ETH");
    
    if (balance < ethers.parseEther("0.001")) {
      console.error("‚ùå Balance insuficiente. Necesitas al menos 0.001 ETH");
      console.log("üö∞ Obt√©n ETH de prueba: https://www.coinbase.com/faucets/base-ethereum-sepolia-faucet");
      process.exit(1);
    }

    // Conectar al contrato
    const contract = new ethers.Contract(VALIDATOR_CONTRACT, VALIDATOR_ABI, wallet);

    // Verificar estado actual
    console.log("üîç Verificando estado actual...");
    const isCurrentlyAuthorized = await contract.isAuthorizedValidator(OWNER_ADDRESS);
    
    if (isCurrentlyAuthorized) {
      console.log("‚úÖ Ya est√°s autorizado como validador!");
      console.log("üéâ Puedes acceder a /validation sin problemas");
      return;
    }

    console.log("‚ö†Ô∏è  No est√°s autorizado a√∫n. Procediendo con la autorizaci√≥n...");
    console.log("");

    // Estimar gas para la transacci√≥n
    console.log("‚õΩ Estimando gas...");
    const gasEstimate = await contract.authorizeValidator.estimateGas(OWNER_ADDRESS);
    console.log("‚õΩ Gas estimado:", gasEstimate.toString());

    // Ejecutar la autorizaci√≥n
    console.log("üîê Ejecutando autorizaci√≥n...");
    const tx = await contract.authorizeValidator(OWNER_ADDRESS, {
      gasLimit: gasEstimate * BigInt(120) / BigInt(100) // 20% extra
    });
    
    console.log("‚è≥ Transacci√≥n enviada:", tx.hash);
    console.log("‚è≥ Esperando confirmaci√≥n...");
    
    const receipt = await tx.wait();
    
    if (receipt.status === 1) {
      console.log("‚úÖ ¬°Autorizaci√≥n completada exitosamente!");
      console.log("üìã Bloque:", receipt.blockNumber);
      console.log("‚õΩ Gas usado:", receipt.gasUsed.toString());
    } else {
      console.error("‚ùå La transacci√≥n fall√≥");
      process.exit(1);
    }

    // Verificar que la autorizaci√≥n funcion√≥
    console.log("");
    console.log("üîç Verificando autorizaci√≥n final...");
    const isNowAuthorized = await contract.isAuthorizedValidator(OWNER_ADDRESS);
    
    if (isNowAuthorized) {
      console.log("‚úÖ ¬°Verificaci√≥n exitosa!");
      console.log("");
      console.log("üéâ AUTORIZACI√ìN COMPLETADA");
      console.log("=" .repeat(35));
      console.log("‚úÖ Ahora puedes acceder a /validation");
      console.log("‚úÖ Puedes validar tickets");
      console.log("‚úÖ Tienes acceso completo al sistema");
      console.log("");
      console.log("üîó Ver transacci√≥n:");
      console.log(`https://sepolia.basescan.org/tx/${tx.hash}`);
    } else {
      console.error("‚ùå Error: La autorizaci√≥n no se aplic√≥ correctamente");
      process.exit(1);
    }

  } catch (error) {
    console.error("‚ùå Error durante la autorizaci√≥n:", error.message);
    
    if (error.code === 'INSUFFICIENT_FUNDS') {
      console.log("üí∞ Necesitas m√°s ETH en tu wallet");
    } else if (error.code === 'NETWORK_ERROR') {
      console.log("üåê Problema de conexi√≥n a la red");
    } else if (error.message.includes('execution reverted')) {
      console.log("üîí El contrato rechaz√≥ la transacci√≥n");
    }
    
    process.exit(1);
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error("‚ùå Error fatal:", error);
      process.exit(1);
    });
}

module.exports = { main };