const { ethers } = require("ethers");
const readline = require('readline');

// Configuraci√≥n
const VALIDATOR_CONTRACT = "0xB1627A905EB21938009f5fA97C9dd35ffB9F1e82";

// ABI para gesti√≥n de validadores
const VALIDATOR_ABI = [
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_validator",
        "type": "address"
      }
    ],
    "name": "authorizeValidator",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_validator",
        "type": "address"
      }
    ],
    "name": "revokeValidator",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_validator",
        "type": "address"
      }
    ],
    "name": "isAuthorizedValidator",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "owner",
    "outputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_validator",
        "type": "address"
      }
    ],
    "name": "getValidatorStats",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  }
];

class ValidatorManager {
  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  async initialize() {
    console.log("üîê GESTOR DE VALIDADORES - TickBase");
    console.log("=" .repeat(45));
    console.log("üìã Contrato:", VALIDATOR_CONTRACT);
    console.log("");

    // Configurar conexi√≥n
    const privateKey = process.env.PRIVATE_KEY;
    if (!privateKey) {
      console.error("‚ùå Error: PRIVATE_KEY no encontrada en .env");
      process.exit(1);
    }

    const provider = new ethers.JsonRpcProvider("https://sepolia.base.org");
    this.wallet = new ethers.Wallet(privateKey, provider);
    this.contract = new ethers.Contract(VALIDATOR_CONTRACT, VALIDATOR_ABI, this.wallet);

    console.log("üë§ Conectado como:", this.wallet.address);
    
    // Verificar que somos el owner
    const owner = await this.contract.owner();
    if (owner.toLowerCase() !== this.wallet.address.toLowerCase()) {
      console.error("‚ùå Error: No eres el owner del contrato");
      console.log("   Owner:", owner);
      console.log("   Tu wallet:", this.wallet.address);
      process.exit(1);
    }

    console.log("‚úÖ Confirmado como owner del contrato");
    
    // Verificar balance
    const balance = await provider.getBalance(this.wallet.address);
    console.log("üí∞ Balance:", ethers.formatEther(balance), "ETH");
    
    if (balance < ethers.parseEther("0.001")) {
      console.log("‚ö†Ô∏è  Balance bajo. Recomendado: al menos 0.001 ETH");
    }
    console.log("");
  }

  async showMenu() {
    console.log("üìã OPCIONES DISPONIBLES:");
    console.log("1. ‚ûï Autorizar nuevo validador");
    console.log("2. ‚ùå Revocar validador existente");
    console.log("3. üìã Ver estado de validador");
    console.log("4. üìä Ver estad√≠sticas de validador");
    console.log("5. üìù Listar validadores comunes");
    console.log("6. üö™ Salir");
    console.log("");
  }

  async promptUser(question) {
    return new Promise((resolve) => {
      this.rl.question(question, (answer) => {
        resolve(answer.trim());
      });
    });
  }

  async authorizeValidator() {
    console.log("\n‚ûï AUTORIZAR NUEVO VALIDADOR");
    console.log("-" .repeat(30));
    
    const address = await this.promptUser("üìù Ingresa la direcci√≥n del validador (0x...): ");
    
    if (!ethers.isAddress(address)) {
      console.error("‚ùå Direcci√≥n inv√°lida");
      return;
    }

    // Verificar si ya est√° autorizado
    const isAuthorized = await this.contract.isAuthorizedValidator(address);
    if (isAuthorized) {
      console.log("‚ö†Ô∏è  Este validador ya est√° autorizado");
      return;
    }

    console.log("‚è≥ Autorizando validador...");
    
    try {
      const tx = await this.contract.authorizeValidator(address);
      console.log("‚è≥ Transacci√≥n enviada:", tx.hash);
      
      const receipt = await tx.wait();
      if (receipt.status === 1) {
        console.log("‚úÖ Validador autorizado exitosamente!");
        console.log("üìã Gas usado:", receipt.gasUsed.toString());
        console.log("üîó Ver en explorer: https://sepolia.basescan.org/tx/" + tx.hash);
      }
    } catch (error) {
      console.error("‚ùå Error al autorizar:", error.message);
    }
  }

  async revokeValidator() {
    console.log("\n‚ùå REVOCAR VALIDADOR");
    console.log("-" .repeat(20));
    
    const address = await this.promptUser("üìù Ingresa la direcci√≥n del validador a revocar: ");
    
    if (!ethers.isAddress(address)) {
      console.error("‚ùå Direcci√≥n inv√°lida");
      return;
    }

    // Verificar si est√° autorizado
    const isAuthorized = await this.contract.isAuthorizedValidator(address);
    if (!isAuthorized) {
      console.log("‚ö†Ô∏è  Este validador no est√° autorizado");
      return;
    }

    // Confirmar acci√≥n
    const confirm = await this.promptUser("‚ö†Ô∏è  ¬øEst√°s seguro? (si/no): ");
    if (confirm.toLowerCase() !== 'si' && confirm.toLowerCase() !== 'yes') {
      console.log("‚ùå Operaci√≥n cancelada");
      return;
    }

    console.log("‚è≥ Revocando validador...");
    
    try {
      const tx = await this.contract.revokeValidator(address);
      console.log("‚è≥ Transacci√≥n enviada:", tx.hash);
      
      const receipt = await tx.wait();
      if (receipt.status === 1) {
        console.log("‚úÖ Validador revocado exitosamente!");
        console.log("üìã Gas usado:", receipt.gasUsed.toString());
      }
    } catch (error) {
      console.error("‚ùå Error al revocar:", error.message);
    }
  }

  async checkValidatorStatus() {
    console.log("\nüìã VERIFICAR ESTADO DE VALIDADOR");
    console.log("-" .repeat(35));
    
    const address = await this.promptUser("üìù Ingresa la direcci√≥n del validador: ");
    
    if (!ethers.isAddress(address)) {
      console.error("‚ùå Direcci√≥n inv√°lida");
      return;
    }

    console.log("üîç Consultando estado...");
    
    try {
      const isAuthorized = await this.contract.isAuthorizedValidator(address);
      const stats = await this.contract.getValidatorStats(address);
      
      console.log("üìä RESULTADO:");
      console.log("  Direcci√≥n:", address);
      console.log("  Autorizado:", isAuthorized ? "‚úÖ S√≠" : "‚ùå No");
      console.log("  Validaciones realizadas:", stats.toString());
      
      if (isAuthorized) {
        console.log("  Estado: üü¢ Activo - Puede validar tickets");
      } else {
        console.log("  Estado: üî¥ Inactivo - Necesita autorizaci√≥n");
      }
      
    } catch (error) {
      console.error("‚ùå Error al consultar:", error.message);
    }
  }

  async showValidatorStats() {
    console.log("\nüìä ESTAD√çSTICAS DE VALIDADOR");
    console.log("-" .repeat(30));
    
    const address = await this.promptUser("üìù Ingresa la direcci√≥n del validador: ");
    
    if (!ethers.isAddress(address)) {
      console.error("‚ùå Direcci√≥n inv√°lida");
      return;
    }

    console.log("üìä Obteniendo estad√≠sticas...");
    
    try {
      const isAuthorized = await this.contract.isAuthorizedValidator(address);
      const validationCount = await this.contract.getValidatorStats(address);
      
      console.log("\nüìã ESTAD√çSTICAS COMPLETAS:");
      console.log("=" .repeat(40));
      console.log("üë§ Validador:", address);
      console.log("üîê Autorizado:", isAuthorized ? "‚úÖ S√≠" : "‚ùå No");
      console.log("üìä Total validaciones:", validationCount.toString());
      
      if (validationCount > 0) {
        console.log("üèÜ Rendimiento: Validador activo");
        console.log("üìà Estado: Operativo");
      } else {
        console.log("üìâ Rendimiento: Sin validaciones a√∫n");
        console.log("üîÑ Estado: Nuevo/Inactivo");
      }
      
    } catch (error) {
      console.error("‚ùå Error al obtener estad√≠sticas:", error.message);
    }
  }

  showCommonValidators() {
    console.log("\nüìù VALIDADORES COMUNES SUGERIDOS:");
    console.log("-" .repeat(40));
    console.log("üè¢ Personal del evento:");
    console.log("  ‚Ä¢ Staff de seguridad");
    console.log("  ‚Ä¢ Coordinadores de evento");
    console.log("  ‚Ä¢ Personal de recepci√≥n");
    console.log("");
    console.log("üé≠ Roles t√≠picos:");
    console.log("  ‚Ä¢ Organizador principal (tu wallet)");
    console.log("  ‚Ä¢ Co-organizadores");
    console.log("  ‚Ä¢ Supervisores de entrada");
    console.log("  ‚Ä¢ Personal de soporte t√©cnico");
    console.log("");
    console.log("üí° Recomendaci√≥n:");
    console.log("  ‚Ä¢ M√°ximo 5-10 validadores por evento");
    console.log("  ‚Ä¢ Revocar acceso despu√©s del evento");
    console.log("  ‚Ä¢ Mantener registro de qui√©n tiene acceso");
  }

  async run() {
    try {
      await this.initialize();
      
      while (true) {
        await this.showMenu();
        const choice = await this.promptUser("Selecciona una opci√≥n (1-6): ");
        
        switch (choice) {
          case '1':
            await this.authorizeValidator();
            break;
          case '2':
            await this.revokeValidator();
            break;
          case '3':
            await this.checkValidatorStatus();
            break;
          case '4':
            await this.showValidatorStats();
            break;
          case '5':
            this.showCommonValidators();
            break;
          case '6':
            console.log("üëã ¬°Hasta luego!");
            process.exit(0);
            break;
          default:
            console.log("‚ùå Opci√≥n inv√°lida. Selecciona 1-6.");
        }
        
        console.log("\n" + "=" .repeat(50) + "\n");
      }
      
    } catch (error) {
      console.error("‚ùå Error fatal:", error);
      process.exit(1);
    } finally {
      this.rl.close();
    }
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  const manager = new ValidatorManager();
  manager.run();
}

module.exports = ValidatorManager;