// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  walletAddress String    @unique
  username      String?   @unique
  firstName     String?
  lastName      String?
  avatar        String?
  bio           String?
  isOrganizer   Boolean   @default(false)
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  events        Event[]   @relation("EventOrganizer")
  tickets       Ticket[]  @relation("TicketOwner")
  purchases     Purchase[] @relation("PurchaseBuyer")
  sales         Sale[]    @relation("SaleSeller")
  reviews       Review[]  @relation("ReviewAuthor")
  notifications Notification[]

  @@map("users")
}

model Event {
  id              String    @id @default(cuid())
  title           String
  description     String
  shortDescription String?
  image           String
  banner          String?
  date            DateTime
  endDate         DateTime?
  venue           String
  city            String
  country         String
  latitude        Float?
  longitude       Float?
  category        String
  tags            String[]
  maxTickets      Int
  soldTickets     Int       @default(0)
  price           Float
  currency        String    @default("ETH")
  isActive        Boolean   @default(true)
  isFeatured      Boolean   @default(false)
  contractAddress String?
  metadataUri     String?
  organizerId     String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  organizer       User      @relation("EventOrganizer", fields: [organizerId], references: [id])
  tickets        Ticket[]
  purchases      Purchase[]
  reviews        Review[]
  sales          Sale[]

  @@map("events")
}

model Ticket {
  id              String    @id @default(cuid())
  tokenId         String    @unique
  eventId         String
  ownerId         String
  ticketType      String
  seatNumber      String?
  price           Float
  currency        String    @default("ETH")
  isUsed          Boolean   @default(false)
  usedAt          DateTime?
  metadataUri     String?
  qrCode          String    @unique
  contractAddress String
  mintedAt        DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  event           Event     @relation(fields: [eventId], references: [id])
  owner           User      @relation("TicketOwner", fields: [ownerId], references: [id])
  purchase        Purchase? @relation(fields: [id], references: [ticketId])
  sale            Sale?

  @@map("tickets")
}

model Purchase {
  id              String    @id @default(cuid())
  ticketId        String    @unique
  buyerId         String
  eventId         String
  amount          Float
  currency        String    @default("ETH")
  transactionHash String    @unique
  status          PurchaseStatus @default(PENDING)
  purchasedAt     DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  ticket          Ticket    @relation(fields: [ticketId], references: [id])
  buyer           User      @relation("PurchaseBuyer", fields: [buyerId], references: [id])
  event           Event     @relation(fields: [eventId], references: [id])

  @@map("purchases")
}

model Sale {
  id              String    @id @default(cuid())
  ticketId        String    @unique
  sellerId        String
  eventId         String
  askingPrice     Float
  currency        String    @default("ETH")
  isActive        Boolean   @default(true)
  soldAt          DateTime?
  transactionHash String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  ticket          Ticket    @relation(fields: [ticketId], references: [id])
  seller          User      @relation("SaleSeller", fields: [sellerId], references: [id])
  event           Event     @relation(fields: [eventId], references: [id])

  @@map("sales")
}

model Review {
  id          String   @id @default(cuid())
  eventId     String
  authorId    String
  rating      Int      @db.SmallInt
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  event       Event    @relation(fields: [eventId], references: [id])
  author      User     @relation("ReviewAuthor", fields: [authorId], references: [id])

  @@map("reviews")
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)
  data        Json?
  createdAt   DateTime         @default(now())

  // Relations
  user        User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("collections")
}

enum PurchaseStatus {
  PENDING
  CONFIRMED
  FAILED
  CANCELLED
}

enum NotificationType {
  TICKET_PURCHASED
  TICKET_SOLD
  EVENT_REMINDER
  PRICE_ALERT
  SYSTEM_UPDATE
}
